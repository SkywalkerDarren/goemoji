# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '0 3 1 * *'
  workflow_dispatch:

jobs:

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19
    
    - name: Download emoji sequence files to official directory
      run: |
        # Ensure official directory exists
        mkdir -p official
        # Download files to official directory
        curl -o official/emoji-sequences.txt https://raw.githubusercontent.com/unicode-org/icu/refs/heads/main/icu4c/source/data/unidata/emoji-sequences.txt
        curl -o official/emoji-zwj-sequences.txt https://raw.githubusercontent.com/unicode-org/icu/refs/heads/main/icu4c/source/data/unidata/emoji-zwj-sequences.txt

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v -race ./...
  
    - name: Run coverage
      run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5.4.0
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Check changes and commit
      # Only execute commit operation on schedule or manual trigger
      if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      run: |
        git config --global user.name 'GitHub Action'
        git config --global user.email 'action@github.com'
        
        # Add files to staging area
        git add official/emoji-sequences.txt official/emoji-zwj-sequences.txt
        
        # Check if there are changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        # Commit changes
        git commit -m "Auto update emoji data files $(date +'%Y-%m-%d')"
        # Push using GitHub provided token
        git push origin HEAD:${GITHUB_REF#refs/heads/}
        
        echo "Getting latest tag and creating new one"
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        VERSION_PARTS=(${LATEST_TAG//./ })
        MAJOR=${VERSION_PARTS[0]#v}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        NEW_PATCH=$((PATCH + 1))
        NEW_TAG="v$MAJOR.$MINOR.$NEW_PATCH"
        echo "New tag: $NEW_TAG"
        
        git tag $NEW_TAG
        git push origin $NEW_TAG
        
        gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
        gh release create $NEW_TAG \
          --title "Release $NEW_TAG" \
          --notes "Auto update emoji data files $(date +'%Y-%m-%d')" \
          --generate-notes
